#!/bin/python3

import sys
from math import *

def create_translation_matrix(i, j):
    return [[1,0,i],[0,1,j],[0,0,1]]

def create_scaling_matrix(m, n):
    return [[m,0,0],[0,n,0],[0,0,1]]

def create_rotation_matrix(angle):
    return [[cos(radians(angle)),-sin(radians(angle)),0],[sin(radians(angle)),cos(radians(angle)),0],[0,0,1]]

def create_reflection_matrix(angle):
    return [[cos(radians(angle * 2)),sin(radians(angle * 2)),0],[sin(radians(angle * 2)),-cos(radians(angle * 2)),0],[0,0,1]]

def multiply_matrix(matrix01, matrix02):
    matrix = [[0,0,0],[0,0,0],[0,0,0]]
    for i in range(3):
        for j in range(3):
            sum = 0
            for k in range(3):
                sum += matrix01[i][k] * matrix02[k][j]
            matrix[i][j] = sum
    return matrix

def  verify_flag(key, matrix, dic):
    if key[0] == 'z':
        print("Scaling by factors ", int(dic[key][0])," and ", int(dic[key][1]), sep="")
        return multiply_matrix(create_scaling_matrix(dic[key][0], dic[key][1]), matrix)
    if key[0] == 't':
        print("Translation along vector (", int(dic[key][0]),", ", int(dic[key][1]),")", sep="")
        return multiply_matrix(create_translation_matrix(dic[key][0], dic[key][1]), matrix)
    if key[0] == 'r':
        print("Rotation by a ", int(dic[key])," degree angle", sep="")
        return multiply_matrix(create_rotation_matrix(dic[key]), matrix)
    if key[0] == 's':
        print("Reflection over an axis with an inclination angle of ", int(dic[key])," degrees", sep="")
        return multiply_matrix(create_reflection_matrix(dic[key]), matrix)
    return matrix

def print_matrix(matrix):
    for i in range(len(matrix)):
        print('{0:.2f}'.format(matrix[i][0]), "   ", '{0:.2f}'.format(matrix[i][1]), "   ", '{0:.2f}'.format(matrix[i][2], sep=""))

def is_float(value):
    try:
        float(value)
        return True
    except ValueError:
        exit(84)


dic = {}
i = 3
index = 48
if len(sys.argv) < 5 or not is_float(sys.argv[1]) or not is_float(sys.argv[2]):
    exit(84)
dic["coord"] = [float(sys.argv[1]), float(sys.argv[2])]
while(i < len(sys.argv)):
    if sys.argv[i] in ["-z", "-t"]:
        if len(sys.argv) < i + 3 or not is_float(sys.argv[i + 1]) or not is_float(sys.argv[i + 2]):
            exit(84)
        dic[sys.argv[i][1] + chr(index)] = [float(sys.argv[i + 1]), float(sys.argv[i + 2])]
        i += 2
        index += 1
    elif sys.argv[i] in ["-r", "-s"]:
        if len(sys.argv) < i + 2 or not is_float(sys.argv[i + 1]):
            exit(84)
        dic[sys.argv[i][1] + chr(index)] = float(sys.argv[i + 1])
        i += 1
        index += 1
    else:
        exit(84)
    i+= 1

matrix = [[1, 0, 0],[0, 1, 0],[0, 0, 1]]

for keys in dic.keys():
    matrix = verify_flag(keys, matrix, dic)

for i in range (3):
    for j in range (3):
        if (-0.001 < matrix[i][j] and matrix[i][j] < 0.001):
            matrix[i][j] = 0.00

print_matrix(matrix)
x = dic["coord"][0] * matrix[0][0] + dic["coord"][1] * matrix[0][1] + matrix[0][2]
y = dic["coord"][0] * matrix[1][0] + dic["coord"][1] * matrix[1][1] + matrix[1][2]
print("(", '{0:.2f}'.format(dic["coord"][0]), ", ", '{0:.2f}'.format(dic["coord"][1]), ")", " => ", sep="", end="")
if (-0.001 < x and x < 0.001):
    print("(0.00, ", '{0:.2f}'.format(y), ")", sep="")
else:
    print("(", '{0:.2f}'.format(x), ", ", '{0:.2f}'.format(y), ")", sep="")